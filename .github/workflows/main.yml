name: SonarQube Analysis Workflow

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  sonar:
    runs-on: self-hosted  # Ensure your runner has the 'self-hosted' label

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin

      # Step 3: Install jq (for JSON processing)
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # Step 4: Install Maven with lock handling
      - name: Install Maven
        run: |
          # Wait and retry if lock file exists
          while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
            echo "Waiting for lock to be released..."
            sleep 5
          done
          # Remove locks if necessary
          sudo rm -f /var/lib/dpkg/lock-frontend
          sudo rm -f /var/lib/dpkg/lock
          sudo rm -f /var/cache/apt/archives/lock
          
          # Fix any broken dpkg process
          sudo dpkg --configure -a
          
          # Install Maven
          sudo apt-get update
          sudo apt-get install -y maven

      # Step 5: Run Maven Build
      - name: Build Project
        run: |
          mvn clean verify

      # Step 6: Generate Jacoco Coverage Report
      - name: Generate Jacoco Report
        run: |
          mvn clean verify jacoco:report

      # Step 7: Publish Jacoco Coverage Report as Artifact
      - name: Publish Jacoco Coverage Result
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: target/site/jacoco/index.html

      # Step 8: SonarQube Analysis
      - name: SonarQube Analysis
        env:
          SONAR_HOST_URL: http://172.27.59.119:9000
          SONAR_USERNAME: ${{ secrets.SONAR_USERNAME }}
          SONAR_PASSWORD: ${{ secrets.SONAR_PASSWORD }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${{ env.SONAR_USERNAME }} \
            -Dsonar.password=${{ env.SONAR_PASSWORD }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      # Step 9: Check Quality Gate Status
      - name: Check SonarQube Quality Gate Status
        env:
          SONAR_HOST_URL: http://172.27.59.119:9000
          SONAR_USERNAME: ${{ secrets.SONAR_USERNAME }}
          SONAR_PASSWORD: ${{ secrets.SONAR_PASSWORD }}
        run: |
          # Fetch the latest analysis task
          ANALYSIS_JSON=$(curl -s -u "$SONAR_USERNAME:$SONAR_PASSWORD" "$SONAR_HOST_URL/api/ce/activity?component=26052_jacoco_Java_Project_Scan_Pom:master")
          echo "Analysis JSON: $ANALYSIS_JSON"

          # Extract the latest task ID
          TASK_ID=$(echo "$ANALYSIS_JSON" | jq -r '.tasks[0].id')
          echo "Task ID: $TASK_ID"

          if [[ -z "$TASK_ID" || "$TASK_ID" == "null" ]]; then
            echo "Error: Failed to fetch the analysis task ID. Check the component key and API response."
            exit 1
          fi

          # Wait for the analysis to complete
          while true; do
            STATUS=$(curl -s -u "$SONAR_USERNAME:$SONAR_PASSWORD" "$SONAR_HOST_URL/api/ce/task?id=$TASK_ID" | jq -r '.task.status')
            echo "Analysis Status: $STATUS"
            if [[ "$STATUS" == "SUCCESS" ]]; then
              break
            elif [[ "$STATUS" == "FAILED" ]]; then
              echo "SonarQube analysis failed."
              exit 1
            fi
            sleep 10
          done

          # Fetch the quality gate status
          QUALITY_GATE_JSON=$(curl -s -u "$SONAR_USERNAME:$SONAR_PASSWORD" "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=26052_jacoco_Java_Project_Scan_Pom:master")
          echo "Quality Gate JSON: $QUALITY_GATE_JSON"

          QUALITY_GATE_STATUS=$(echo "$QUALITY_GATE_JSON" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $QUALITY_GATE_STATUS"

          if [[ "$QUALITY_GATE_STATUS" == "OK" ]]; then
            echo "Quality Gate passed."
          else
            echo "Quality Gate failed. Exiting..."
            exit 1
          fi

  notify:
    runs-on: self-hosted
    needs: sonar
    if: always()  # Always run regardless of the result of previous jobs

    steps:
      # Step 1: Send notification to Slack using Incoming Webhook
      - name: Notify Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [[ "${{ needs.sonar.result }}" == "success" ]]; then
            curl -X POST -H 'Content-type: application/json' \
            --data '{"text": "SELF HOSTED: All jobs completed successfully! SonarQube analysis and artifact upload are done."}' \
            $SLACK_WEBHOOK_URL
          else
            curl -X POST -H 'Content-type: application/json' \
            --data '{"text": "SELF HOSTED: One or more jobs failed! Please check the workflow logs for details."}' \
            $SLACK_WEBHOOK_URL
          fi
