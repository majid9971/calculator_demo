name: SonarQube Analysis Workflow

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  sonar:
    runs-on: self-hosted  # Ensure your runner has the 'self-hosted' label

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin

      # Step 3: Install Maven with lock handling
      - name: Install Maven
        run: |
          # Wait and retry if lock file exists
          while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
            echo "Waiting for lock to be released..."
            sleep 5
          done
          # If lock still exists, remove it
          sudo rm -f /var/lib/dpkg/lock-frontend
          sudo rm -f /var/lib/dpkg/lock
          sudo rm -f /var/cache/apt/archives/lock
          
          # Fix any broken dpkg process
          sudo dpkg --configure -a
          
          # Install Maven
          sudo apt-get update
          sudo apt-get install -y maven

      # Step 4: Run Maven Build
      - name: Build Project
        run: |
          mvn clean verify

      # Step 5: Generate Jacoco Coverage Report
      - name: Generate Jacoco Report
        run: |
          mvn clean verify jacoco:report

      # Step 6: Publish Jacoco Coverage Report as Artifact
      - name: Publish Jacoco Coverage Result
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: target/site/jacoco/index.html

      # Step 7: SonarQube Analysis (using credentials)
      - name: SonarQube Analysis
        env:
          SONAR_HOST_URL: http://172.27.59.119:9000
          SONAR_USERNAME: ${{ secrets.SONAR_USERNAME }}
          SONAR_PASSWORD: ${{ secrets.SONAR_PASSWORD }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${{ env.SONAR_USERNAME }} \
            -Dsonar.password=${{ env.SONAR_PASSWORD }} \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  jfrog_upload:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Install JFrog CLI
      - name: Install JFrog CLI
        run: |
          curl -fL https://getcli.jfrog.io | sh
          chmod +x jfrog
          sudo mv jfrog /usr/local/bin/

      # Step 2: Configure JFrog CLI
      - name: Configure JFrog CLI
        run: |
          jfrog config add my-server \
            --artifactory-url ${{ secrets.JFROG_URL }} \
            --user ${{ secrets.JFROG_USERNAME }} \
            --password ${{ secrets.JFROG_PASSWORD }}

      # Step 3: Upload Build Artifacts to JFrog Artifactory
      - name: Upload Build Artifacts to JFrog
        run: |
          jfrog rt upload "target/*.jar" "selfhostedmaven/selfhostedmaven/"

  notify:
    runs-on: ubuntu-latest
    needs: [sonar, jfrog_upload]  # Ensure this job waits for 'sonar' and 'jfrog_upload' jobs to complete
    if: always()  # Always run regardless of the result of previous jobs

    steps:
    # Step 1: Send notification to Slack using Incoming Webhook
    - name: Notify Slack
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        if [[ "${{ needs.sonar.result }}" == "success" && "${{ needs.jfrog_upload.result }}" == "success" ]]; then
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "SELF HOSTED: All jobs completed successfully! SonarQube analysis and artifact upload are done."}' \
          $SLACK_WEBHOOK_URL
        else
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "SELF HOSTED: One or more jobs failed! Please check the workflow logs for details."}' \
          $SLACK_WEBHOOK_URL
        fi

